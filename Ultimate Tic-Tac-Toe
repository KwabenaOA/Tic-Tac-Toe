import java.util.Scanner;

public class ultimate_tic_tac_toe extends tic_tac_toe
{
	private String[][] [][] mainGrid;
	private String[][] winGrid;
	private String player1;
	private String player2;
	private int num;
	private Scanner keyboard = new Scanner (System.in);
	public ultimate_tic_tac_toe(){}
	public void opening()
	{
		System.out.println("Welcome to Tic Tac Toe!");
		System.out.print("Please enter the name of Player 1: ");
		this.player1 = keyboard.nextLine();
		while(this.player1.equals("") || this.player1.equals(" "))
		{
			System.out.println();
			System.out.println("Sorry, this is not a valid name.");
			System.out.print("Please enter a valid name for Player 1: ");
			this.player1 = keyboard.nextLine();
		}
		System.out.println();
		System.out.print("Please enter the name of Player 2: ");
		this.player2 = keyboard.nextLine();
		while(this.player2.equals("") || this.player2.equals(" ") || this.player2.equals(this.player1))
		{
			System.out.println();
			System.out.println("Sorry, this is not a valid name.");
			System.out.print("Please enter a valid name for Player 2: ");
			this.player2 = keyboard.nextLine();
		}
		System.out.println();
		System.out.print("What is the size of the \"nxn\" grid (3 ≤ n ≤ 9): ");
		
		this.num = (int)(keyboard.nextDouble());
		while(this.num <= 2 || this.num >= 10)
		{
			System.out.println();
			System.out.println("Sorry, that size board is invalid.");
			System.out.print("Please enter a valid size for the \"nxn\" grid (3 ≤ n ≤ 9): ");
			this.num = (int)(keyboard.nextDouble());
		}
		System.out.println();
		System.out.println("::PRESS THE SPACE BAR TO BEGIN::");
		keyboard.nextLine();//TODO
	}
	public void makeboard()
	{
		//full-board
		this.mainGrid = new String[this.num][this.num] [this.num][this.num];
		for(int k = 0; k < this.num; k++)
		{
			for(int j = 0; j < this.num; j++)
			{
				this.mainGrid[k][j] = super.makeGrid(this.num);
			}
		}
		
		this.winGrid = new String[this.num][this.num];
		for(int k = 0; k < this.num; k++)
		{
			for(int j = 0; j < this.num; j++)
			{
				this.winGrid[k][j] = "-";
			}
		}
	}
	public void printFullBoard()
	{
		//::Example Full Board::
		//    1 2 3  4 5 6  7 8 9
		//1  | |x| || |x| || |x| |
		//2  |x|o| ||x|o| ||x|o| |
		//3  | | |o|| | |o|| | |o|
		//    - - -  - - -  - - -
		//4  | |x| || |x| || |x| |
		//5  |x|o| ||x|o| ||x|o| |
		//6  | | |o|| | |o|| | |o|
		//    - - -  - - -  - - -
		//7  | |x| || |x| || |x| |
		//8  |x|o| ||x|o| ||x|o| |
		//10 | | |o|| | |o|| | |o|
		
		System.out.println();
		System.out.println("::Full Board::");
		System.out.println();
		//prints the numbers at the top
		if(this.num <= 3)
		{
			System.out.print(" ");
			for(int i = 1; i <= this.num; i++)
			{
				System.out.print(" ");
				for(int k = 1; k <= this.num; k++)
				{
					System.out.print(" " + ((i-1)*3+k));
				}
			}
			System.out.println();//new line
		}
		else
		{
			int n = 0;
			//ten's digit
			System.out.print("  ");
			for(int i = 1; i <= this.num; i++)
			{
				System.out.print(" ");
				for(int k = 1; k <= this.num; k++)
				{
					n = ((i-1)*this.num+k);
					System.out.print(" " + (n / 10));
				}
			}
			System.out.println();//new line
			//one's digit
			System.out.print("  ");
			for(int i = 1; i <= this.num; i++)
			{
				System.out.print(" ");
				for(int k = 1; k <= this.num; k++)
				{
					n = ((i-1)*this.num+k);
					System.out.print(" " + (n % 10));
				}
			}
			System.out.println();//new line
		}
		
		//prints the rows of each semi board, line by line
		for(int i = 1; i <= this.num; i++)//every set of 3 lines
		{
			for(int k = 1; k <= this.num; k++)//every line
			{
				String str = "";
				//number on every line
				if(this.num <= 3)
					str += ((i-1)*this.num+k) + " ";
				else
				{
					str += ((i-1)*this.num+k) + "";
					if(((i-1)*this.num+k) < 10)
						str += "  ";
					else
						str += " ";
				}
				
				for(int x = 0; x < this.num; x++)
				{
					//[i-1] row of the mainGrid should change 0 times per set
					//[x] col of the mainGrid should change 3 times per line
					String[][] semi = this.mainGrid[i-1][x];//semi board
					//semi grid should change 3 times
					//[k-1] row of one semi grid should change 0 times per line
					//[y] col of one main grid should change 3 times per line
					str += "|";
					for(int y = 0; y < this.num; y++)//col of the semi grid
					{
							str += semi[k-1][y] + "|";
					}
				}
				System.out.println(str);//prints the string
			}
			if(i == this.num)
				break;
			if(this.num <= 3)
			{
				System.out.print(" ");
			}
			else
			{
				System.out.print("  ");
			}
			for(int a = 0; a < this.num; a++)
			{
				System.out.print(" ");
				for(int b = 0; b < this.num; b++)
				{
					System.out.print(" -");
				}
			}
			System.out.println();
		}
	}
	public void printSemiBoard(int[] coor)
	{
		//::Example Semi Board::
		//   1 2 3
		//1 | |x| |
		//2 |x|o| |
		//3 | | |o|
		
		//prints the numbers at the top
		System.out.println();
		System.out.println("::Tic-Tac-Toe Box (" + (coor[0]+1) + " " + (coor[1]+1) + ")::");
		System.out.println();
		System.out.print("  ");
		for(int k = 1; k <= this.num; k++)
		{
			System.out.print(" " + k);
		}
		
		System.out.println();
		for(int k = 0; k < this.num; k++)
		{
			System.out.print((k+1) + " ");
			for(int j = 0; j < this.num; j++)
			{	
				System.out.print("|");
				System.out.print(this.mainGrid[coor[0]][coor[1]][k][j]);
			}
			System.out.println("|");
		}
	}
	public void printSemiFullBoard()
	{
		//::Example Semi-Full Board::
		//   1 2 3
		//1 |-|-|-|
		//2 |-|-|-|
		//3 |-|-|-|
		
		System.out.println();
		System.out.println("::Full Board (Small)::");
		System.out.println();
		//prints the numbers at the top
		System.out.print("  ");
		for(int k = 1; k <= this.num; k++)
		{
			System.out.print(" " + k);
		}
		
		System.out.println();
		for(int k = 0; k < this.num; k++)
		{
			System.out.print((k+1) + " ");
			for(int j = 0; j < this.num; j++)
			{	
				System.out.print("|");
				System.out.print(this.winGrid[k][j]);
			}
			System.out.println("|");
		}
	}
	public boolean setOver(int row, int col)
	{
		String[][] grid = this.mainGrid[row][col];
		int count = 1;
		if(!grid[0][0].equals(" "))//DIAGONAL top-left::bottom-right
		{
			count = 1;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!grid[i][i].equals(grid[i+1][i+1]))
					break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		if(grid[this.num-1][0] != " ")//DIAGONAL bottom-left::top-right
		{
			count = 1;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!grid[this.num-1-i][i].equals(grid[this.num-2-i][i+1]))
					break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		for(int k = 0; k < this.num; k++)
		{
			count = 1;
			if(grid[k][0] == " ")
				break;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!grid[k][i].equals(grid[k][i+1]))//HORIZONTAL left::right
					break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		for(int j = 0; j < this.num; j++)
		{
			count = 1;
			if(grid[0][j] == " ")
				break;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!grid[i][j].equals(grid[i+1][j]))//VERTICAL top::bottom
				break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		return false;
	}
	public boolean matchOver()
	{
		int count = 1;
		if(!this.winGrid[0][0].equals("-"))//DIAGONAL top-left::bottom-right
		{
			count = 1;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!this.winGrid[i][i].equals(this.winGrid[i+1][i+1]))
					break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		if(this.winGrid[this.num-1][0] != "-")//DIAGONAL bottom-left::top-right
		{
			count = 1;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!this.winGrid[this.num-1-i][i].equals(this.winGrid[this.num-2-i][i+1]))
					break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		for(int k = 0; k < this.num; k++)
		{
			count = 1;
			if(this.winGrid[k][0] == "-")
				break;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!this.winGrid[k][i].equals(this.winGrid[k][i+1]))//HORIZONTAL left::right
					break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		for(int j = 0; j < this.num; j++)
		{
			count = 1;
			if(this.winGrid[0][j] == "-")
				break;
			for(int i = 0; i < this.num-1; i++)
			{
				if(!this.winGrid[i][j].equals(this.winGrid[i+1][j]))//VERTICAL top::bottom
				break;
				count++;
			}
			if(count == this.num)
				return true;
		}
		return false;
	}
	public boolean draw(int[] coor)
	{
		for(int i = 0; i < this.num; i++)
		{
			for(int j = 0; j < this.num; j++)
			{
				if(this.mainGrid[coor[0]][coor[1]][i][j].equals(" "))
					return false;
			}
		}
		return true;
	}
	public boolean fullBox(int row, int col)//Determines if a semi-board is completely occupied
	{
		String[][] board = this.mainGrid[row][col];
		for(int i = 0; i < this.num; i++)
		{
			for(int j = 0; j < this.num; j++)
			{
				if(board[i][j].equals(" "))
					return false;
			}
		}
		return true;
	}
	public void play()
	{
		opening();
		makeboard();
		int turn = 1;
		int[] semi = new int[2];
		
		System.out.println("---------------------------------------------------------------------------------");
		System.out.println();
		printFullBoard();
		System.out.println();
		printSemiFullBoard();
		System.out.println();
		System.out.print(this.player1 + ", pick a coordinate to be the starting tic-tac-toe box (\"row *space* column\" ie. \"1 3\"): ");
		int row = (int)(keyboard.nextDouble());
		int col = (int)(keyboard.nextDouble());
		while(row > this.num || row < 1 || col > this.num || col < 1 || this.winGrid[row-1][col-1] != "-")
		{
			System.out.println();
			System.out.println("Sorry, you cannot choose that as a starting tic-tac-toe box.");
			System.out.print(this.player1 + ", pick a coordinate to be the starting tic-tac-toe box (\"row *space* column\" ie. \"1 3\"): ");
			row = (int)(keyboard.nextDouble());
			col = (int)(keyboard.nextDouble());
		}
		semi[0] = row-1; semi[1] = col-1;
		System.out.print("---------------------------------------------------------------------------------");
		
		while(matchOver() == false && draw(semi) == false)//main loop
		{	
			String[][] board = mainGrid[semi[0]][semi[1]];
			turn++;
			System.out.println();
			printSemiBoard(semi);//printing the semi board
			System.out.println();
			if(turn % 2 == 0)
			{
				System.out.println("***Enter \"0 0\" to view the full board***");
				System.out.print(this.player1 + ", pick a coordinate to place your piece (\"row *space* column\" ie. \"1 3\"): ");
				row = (int)(keyboard.nextDouble());
				col = (int)(keyboard.nextDouble());
				if(row == 0 && col == 0)//printing the full board
				{
					printFullBoard();
					printSemiFullBoard();
					printSemiBoard(semi);
					System.out.println();
					System.out.print(this.player1 + ", pick a coordinate to place your piece (\"row *space* column\" ie. \"1 3\"): ");
					row = (int)(keyboard.nextDouble());
					col = (int)(keyboard.nextDouble());
				}
				while(row > this.num || row < 1 || col > this.num || col < 1 || board[row-1][col-1] != " " || fullBox(row-1,col-1) == true)
				{
					System.out.println();
					System.out.println("Sorry, you cannot place your piece there.");
					System.out.print(this.player1 + ", pick a coordinate to place your piece (\"row *space* column\" ie. \"1 3\"): ");
					row = (int)(keyboard.nextDouble());
					col = (int)(keyboard.nextDouble());
				}
				board[row-1][col-1] = "x";
			}
			else if(turn % 2 != 0)
			{
				System.out.println("***Enter \"0 0\" to view the full board***");
				System.out.print(this.player2 + ", pick a coordinate to place your piece (\"row *space* column\" ie. \"1 3\"): ");
				row = (int)(keyboard.nextDouble());
				col = (int)(keyboard.nextDouble());
				if(row == 0 && col == 0)//printing the full board
				{
					printFullBoard();
					printSemiFullBoard();
					printSemiBoard(semi);
					System.out.println();
					System.out.print(this.player1 + ", pick a coordinate to place your piece (\"row *space* column\" ie. \"1 3\"): ");
					row = (int)(keyboard.nextDouble());
					col = (int)(keyboard.nextDouble());
				}
				while(row > this.num || row < 1 || col > this.num || col < 1 || board[row-1][col-1] != " " || fullBox(row-1,col-1) == true)
				{
					System.out.println();
					System.out.println("Sorry, you cannot place your piece there.");
					System.out.print(this.player2 + ", pick a coordinate to place your piece (\"row *space* column\" ie. \"1 3\"): ");
					row = (int)(keyboard.nextDouble());
					col = (int)(keyboard.nextDouble());
				}
				board[row-1][col-1] = "o";
			}
			System.out.print("---------------------------------------------------------------------------------");
			if(setOver(semi[0],semi[1]) && this.winGrid[semi[0]][semi[1]].equals("-"))
			{
				System.out.println("\n");
				if(turn % 2 == 0)
				{
					System.out.println(player1 + " has taken a section of the board!!!");
					this.winGrid[semi[0]][semi[1]] = "x";
				}
				else if(turn % 2 != 0)
				{
					System.out.println(player2 + " has taken a section of the board!!!");
					this.winGrid[semi[0]][semi[1]] = "o";
				}
				printSemiFullBoard();
				System.out.print("---------------------------------------------------------------------------------");
			}
			semi[0] = row-1; semi[1] = col-1;
		}
		System.out.println();
		printBoard();
		System.out.println();
		System.out.println("GAME OVER");
		if(draw() == true)
			System.out.println("Draw!");
		else
		{
			if(turn % 2 == 0)
				System.out.println(this.player1 + " wins!");
			else if(turn % 2 != 0)
				System.out.println(this.player2 + " wins!");
		}
		System.out.print("Do you want to play again? (1 = Yes, 2 = No): ");
		int again = (int)(keyboard.nextDouble());
		while(again != 1 && again != 2)
		{
			System.out.println();
			System.out.println("Sorry, that is an invalid response, please enter a valid response.");
			System.out.print("Do you want to play again? (1 = Yes, 2 = No): ");
			again = (int)(keyboard.nextDouble());
		}
		System.out.println();
		if(again == 1)
		{
			System.out.println("___________________________________________________");
			System.out.println();
			keyboard.nextLine();
			play();
		}
		else if(again == 2)
			System.out.print("Thanks for playing!");
	}
	public static void main(String args [])
	{
		ultimate_tic_tac_toe game = new ultimate_tic_tac_toe();
		game.play();
	}
}
